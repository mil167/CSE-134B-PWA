const ConstTeam={currentTeam:undefined,util:{uuid:function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,c=>(c^crypto.getRandomValues(new Uint8Array(1))[0]&15>>c/4).toString(16))}}};class Team{constructor(teamName){this.name=teamName;this.roster=new Roster()}
addPlayer(name,number,position,matchCount=0,goals=0,redCards=0,playerId){this.roster.addPlayer(name,number,position,matchCount,goals,redCards,playerId)}
findPlayer(playerId){this.roster.findPlayer(playerId)}
editPlayer(playerId,name,number,position){this.roster.editPlayer(playerId,name,number,position)}
removePlayer(playerId){this.roster.removePlayer(playerId)}
renderRoster(){this.roster.render()}}
class Roster{constructor(){this.roster=[]}
isPlayerActive(playerId){return this.findPlayer(playerId).archived}
isNumberTaken(number){for(let i=0;i<this.roster.length;i++){if(!this.roster[i].archived&&(this.roster[i],number==number))
return!0}
return!1}
addPlayer(name,number,position,matchCount=-1,goals=-1,redCards=-1,playerId=0){let player=new Player(name,number,position,matchCount,goals,redCards,playerId);this.roster.push(player)}
editPlayer(playerId,name,number,position){let player=this.findPlayer(playerId);player.edit(name,number,position)}
findPlayer(playerId){console.log(playerId);for(let i=0;i<this.roster.length;i++){console.log(this.roster[i].playerId);if(this.roster[i].playerId==playerId){return(this.roster[i])}}
return-1}
removePlayer(playerId){let player=this.findPlayer(playerId);player.remove()}
get(){return this.roster}
render(){let template=document.querySelector('#roster');let markupPlayerList='<ul>';for(let i=0;i<this.roster.length;i++){markupPlayerList+=this.roster[i].render()}
markupPlayerList+='</ul>';template.content.querySelector('#playerList').innerHTML=markupPlayerList;let clonedTemplate=document.importNode(template.content,!0);let view=document.querySelector('#view');view.innerHTML="";view.appendChild(clonedTemplate);document.querySelector('#addBtn').addEventListener('click',function(){ConstTeam.currentTeam.roster.renderAddForm()},!1)}
renderAddForm(playerId){let template=document.querySelector('#playerFormTemplate'),clonedTemplate=document.importNode(template.content,!0),view=document.querySelector('#view');view.innerHTML="";view.appendChild(clonedTemplate);if(playerId){let player=ConstTeam.currentTeam.roster.findPlayer(playerId);document.querySelector('#playerName').value=player.name;document.querySelector('#playerPosition').value=player.position;document.querySelector('#playerNumber').value=player.number;document.querySelector('#addPlayerBtn').setAttribute('data-action','edit');document.querySelector('#addPlayerBtn').setAttribute('data-playerid',playerId)}
document.querySelector('#addPlayerBtn').addEventListener('click',function(){let name,position,number,playerId;name=document.querySelector('#playerName').value;position=document.querySelector('#playerPosition').value;number=document.querySelector('#playerNumber').value;playerId=document.querySelector('#addPlayerBtn').getAttribute('data-playerid');if(playerId){ConstTeam.currentTeam.editPlayer(playerId,name,number,position)}else{var fire_uuid=ConstTeam.util.uuid();console.log(fire_uuid);fire_updateRosterInfo(fire_uuid,{"playerId":fire_uuid,"name":name,"position":position,"number":number,"matchCount":0,"goals":0,"redCards":0})}
ConstTeam.currentTeam.renderRoster()},!1);document.querySelector('#cancelPlayerBtn').addEventListener('click',function(){ConstTeam.currentTeam.renderRoster()},!1)}}
class Player{constructor(name,number,position,matchCount,goals,redCards,playerId){this.playerId=playerId;if(playerId==0){console.log("no player id");this.playerId=ConstTeam.util.uuid()}
this.name=name;this.number=number;this.position=position;this.archived=!1;this.matchCount=matchCount;this.goals=goals;this.redCards=redCards}
edit(name,number,position){this.name=name;this.number=number;this.position=position;fire_updateRosterInfo(this.playerId,{"playerId":this.playerId,"name":this.name,"number":this.number,"position":this.position,"archived":this.archived,"matchCount":this.matchCount,"goals":this.goals,"redCards":this.redCards})}
remove(){this.archived=!0;fire_removeRosterPlayer(this.playerId)}
get(){if(!this.archived){return{id:this.playerId,name:this.mame,number:this.number,position:this.position}}}
render(){let MARKUP='';if(!this.archived){MARKUP=`<li class="player"><strong>Name: ${this.name}</strong> <br>
			Title: ${this.position} <br>
			Jersey #: ${this.number} <br>

             <div class="recordControls">
                [ <span class="editBtn" onclick="ConstTeam.currentTeam.roster.renderAddForm(this.id)" id="${this.playerId}"> Edit </span>
                ] &nbsp;&nbsp;
          		[<span class="editBtn" onclick="ConstTeam.currentTeam.removePlayer(this.id); ConstTeam.currentTeam.renderRoster()" id="${this.playerId}"> Delete </span>
                ] &nbsp;&nbsp;
                [ <span class="infoBtn" onclick="ConstTeam.currentTeam.roster.findPlayer(this.id).showInfo(this.id)" id="${this.playerId}"> More Info! </span>
            	]
            </div>
            </li>`}
return MARKUP}
showInfo(playerId){let template=document.querySelector('#playerInfoTemplate');let MARKUP='';if(playerId){MARKUP=`<div class="playerBasicInfo">
            <h2>Personal Information:</h2>
	            <ul class="playerInfo">
	            	<li>Name:  ${this.name}</li>
	            	<li>Jersey #:  ${this.number} </li>
	            	<li>Position:  ${this.position} </li>
	             </ul>
	         </div>
             <hr>

             <div class="playerMatchInfo">
             <h2>Match Statistics:</h2>
	            <ul class="playerInfo">
	            	<li>Matches so far:  ${this.matchCount} </li>
            		<li>Goals:  ${this.goals} </li>
            		<li>Red Cards:  ${this.redCards} </li>
	             </ul>
	         </div>
             <br>`}
template.content.querySelector('#playerInfo').innerHTML=MARKUP;let clonedTemplate=document.importNode(template.content,!0),view=document.querySelector('#view');view.innerHTML="";view.appendChild(clonedTemplate)}}
class Schedule{constructor(){this.schedule=[]}
render(){let template=document.querySelector('#schedule');let clonedTemplate=document.importNode(template.content,!0);let view=document.querySelector('#view');view.innerHTML="";view.appendChild(clonedTemplate)}}
class Stats{constructor(){this.stats=[]}
render(){let template=document.querySelector('#stats');let clonedTemplate=document.importNode(template.content,!0);let view=document.querySelector('#view');view.innerHTML="";view.appendChild(clonedTemplate)}}
window.addEventListener('DOMContentLoaded',function(){ConstTeam.currentTeam=new Team(store.teamname);for(let i=0;i<store.roster.length;i++){ConstTeam.currentTeam.addPlayer(store.roster[i].name,store.roster[i].number,store.roster[i].position,store.roster[i].matchCount,store.roster[i].goals,store.roster[i].redCards,store.roster[i].playerId)}
ConstTeam.currentTeam.renderRoster();document.querySelector('#rosterNav').addEventListener('click',function(){ConstTeam.currentTeam.renderRoster()},!1);document.querySelector('#scheduleNav').addEventListener('click',function(){window.location.assign("hw4_schedule.html")},!1);document.querySelector('#statsNav').addEventListener('click',function(){window.location.assign("hw4_home.html")},!1)},!1);afterRosterUpdate=function(){ConstTeam.currentTeam=new Team(store.teamname);for(let i=0;i<store.roster.length;i++){ConstTeam.currentTeam.addPlayer(store.roster[i].name,store.roster[i].number,store.roster[i].position,store.roster[i].matchCount,store.roster[i].goals,store.roster[i].redCards,store.roster[i].playerId)}
ConstTeam.currentTeam.renderRoster();console.log(ConstTeam.currentTeam)}